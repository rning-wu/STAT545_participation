square(10)
square <- function(x) {
y <- x^2
return(y)
5
}
square(10)
max(x) - min(x)
?min
?max
max(gapminder$lifeExp) - min(gapminder$lifeExp)
library(gapminder)
library(testthat)
install.packages('testthat')
library(gapminder)
library(tidyverse)
library(tidyverse)
library(testthat)
square <- function(x) {
y <- x^2
return(y)
5
}
square(10)
?min
?max
max(gapminder$lifeExp) - min(gapminder$lifeExp)
max_minus_min <- function(x) {
max(x) - min(x)
}
max_minus_min(1:10)
max_minus_min(runif(100))
max_minus_min(runif(100))
max_minus_min(runif(100))
expect_equal(0.1 + 0.2, 0.3)
expect_identical(0.1 + 0.2, 0.3)
# max_minus_min(numeric(0))
test_that("Simple cases work", {
expect_equal(max_minus_min(1:10), 9)
expect_lt(max_minus_min(runif(100)), 1)
})
# Test that simple cases work
expect_equal(max_minus_min(1:10), 9)
expect_lt(max_minus_min(runif(100)), 1)
test_that("Simple cases work", {
expect_equal(max_minus_min(1:10), 9)
expect_lt(max_minus_min(runif(100)), 1)
})
max_minus_min(gapminder[c('lifeExp', 'gdpPercap', 'pop')])
stopifnot(FALSE)
stop("Here's my little error message.")
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(tidyverse))
library(gapminder)
library(testthat)
fox <- str_subset(sentences, pattern = 'fox')
(fox <- str_subset(sentences, pattern = 'fox'))
(fox <- str_subset(sentences, pattern = '*'))
(fox <- str_subset(sentences, pattern = "*"))
(fox <- str_subset(sentences, pattern = "fox"))
(str_split(fox, ' '))
(str_split(sentences, ' '))
(str_split(fox, ' '))[[1]] %>%
length()
fox %>%
str_split(pattern="") %>%
str_to_lower() %>%
table()
fox %>%
str_split(pattern="") %>%
str_to_lower() %>%
table() %>% table()
help table
table
?table
fox %>%
str_split(pattern="") %>%
`[[` %>%
str_to_lower() %>%
table()
`[[`
fox %>%
str_split(pattern="") %>%
`[[`(1) %>%
str_to_lower()
fox %>%
str_split(pattern="") %>%
`[[`(1) %>%
str_to_lower() %>%
table()
tibble(fruit)
tibble(fruit) %>%
separate(fruit, into = c("pre", "post"), sep = " ")
fox %>%
str_replace('fox', 'giraffe')
fruit %>% head
fruit %>%
str_pad(width=7, side="right", pad="$") %>%
head()
str_length(fruit)
length(fruit)
str_length(fruit)
length(fruit)
str_c(words[1:4], words[5:8], sep=" & ")
str_c(words[3:4], words[5:8], sep=" & ")
str_c(words[3:4], words[5:8], sep=" & ", collapse=", ")
fruit_df <- tibble(
fruit1 = fruit[1:4],
fruit2 = fruit[5:8]
)
fruit_df %>%
unite("flavor_combo", fruit1, fruit2, sep = " & ")
1:12
str(1:12)
as.string(1:12)
as.character(1:12)
(num <- str_pad(as.character(1:12), width = 2, side = 'left', pad = '0'))
(folders <- str_c('cm1', num))
here::here()
library(here)
(folders <- str_c('/cm1', num))
expect_true(all(str_length(folders) == 6))
pwd
pwd()
getwd()
str_c(getwd(),folders)
dir.create(str_c(getwd(),folders))
?dir.create
(contents <- str_c("# Participation \n\n Participation for class meeting ", 1:12))
library(gapminder)
countries <- levels(gapminder$country)
(str_subset(countries, pattern = "i.a"))
str_view_all(countries, pattern = "i.a")
str_view_all(countries, pattern = "i.a", match=TRUE)
str_view_all(countries, pattern = 'a.a.a')
str_view_all(countries, pattern = 'a.a.a', match = T)
str_view_all_match(countries, pattern = "[^aeiouAEIOU][^aeiou][^aeiou]")
str_view_all_match(countries, pattern = "i.a")
str_view_all(countries, pattern, match=TRUE)
str_view_all_match <- function(countries, pattern) {
str_view_all(countries, pattern, match=TRUE)
}
str_view_all_match(countries, pattern = "[^aeiouAEIOU][^aeiou][^aeiou]")
str_view_all_match(countries, "reo+")
str_view_all_match(countries, "ro+")
str_view_all_match(countries, "e{2}")
str_view_all_match(countries, pattern="aa|ee")
str_view_all_match(countries, pattern="[ae]{2}")
str_view_all_match(countries, pattern = "land$")
str_view_all_match(countries, pattern = "$")
str_view_all_match(countries, pattern = "land$")
